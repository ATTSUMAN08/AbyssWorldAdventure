plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.8.0'
}

group = 'me.attsuman08.rpg'
version = '1.0.0'

repositories {
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'codemc-repo'
        url = 'https://repo.codemc.io/repository/maven-public/'
    }
    maven {
        name = 'md_5-public'
        url = 'https://repo.md-5.net/content/groups/public/'
    }
    maven {
        name = 'citizens-repo'
        url = 'https://repo.citizensnpcs.co/'
    }
    maven {
        name = 'jitpack'
        url = 'https://jitpack.io'
    }
    maven {
        name = 'dmulloy2-repo'
        url = 'https://repo.dmulloy2.net/repository/public/'
    }
}

dependencies {
    // Kotlin
    compileOnly("org.jetbrains.kotlin:kotlin-stdlib:1.8.0")
    // Kotlin Exposed
    compileOnly("org.jetbrains.exposed:exposed-core:0.41.1")
    compileOnly("org.jetbrains.exposed:exposed-dao:0.41.1")
    compileOnly("org.jetbrains.exposed:exposed-jdbc:0.41.1")
    compileOnly("org.jetbrains.exposed:exposed-jodatime:0.41.1")
    // PostgreSQL
    compileOnly("org.postgresql:postgresql:42.5.3")
    // Minecraft API
    compileOnly("io.papermc.paper:paper-api:1.19.3-R0.1-SNAPSHOT")
    // Plugin API
    compileOnly("com.github.decentsoftware-eu:decentholograms:2.7.9")
    compileOnly("LibsDisguises:LibsDisguises:10.0.26")
    compileOnly("net.citizensnpcs:citizensapi:2.0.30-SNAPSHOT")
    compileOnly("com.comphenix.protocol:ProtocolLib:4.8.0")
    compileOnly(files("libs/openaudiomc-6.7.7.jar"))
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(targetJavaVersion))
    }
    jvmToolchain(targetJavaVersion)
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

jar {
    archiveFileName = "AWATERNA-${project.version}.jar"
    //archiveName("SOMA-${project.version}.jar")
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

task BuildAndUpload(type: Exec) {
    workingDir "${buildDir}/libs"
    commandLine "${buildDir}/libs/SFTP_Uploader.bat"
}
BuildAndUpload.dependsOn(build)